buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'com.guardsquare:proguard-gradle:7.4.0'
	}
}

plugins {
	id 'java'
	id 'maven-publish'
	id 'checkstyle'
	id 'org.quiltmc.gradle.licenser' version '2.0.1'
}

version '2.2.2'
group 'org.quiltmc'

version = version + (System.getenv("GITHUB_ACTIONS") ? "" : "+local")

sourceSets {
	testInputs
}

repositories {
	mavenCentral()
	maven {
		name 'Quilt Repository'
		url 'https://maven.quiltmc.org/repository/release/'
	}
	maven {
		name 'Quilt Snapshots'
		url 'https://maven.quiltmc.org/repository/snapshot/'
	}
	mavenLocal()

	// Enigma dependencies
	maven {
		url 'https://maven.fabricmc.net/'
//		content {
//			includeModule('net.fabricmc', 'cfr')
//		}
	}
	// remove when ASM fix is released
	maven {
		url = "https://repository.ow2.org/nexus/content/repositories/snapshots/"
	}

	// Test inputs dependencies
	maven {
		name 'Minecraft Libraries'
		url 'https://libraries.minecraft.net'
	}

	maven {
		name 'Shedaniel'
		url 'https://maven.shedaniel.me/'
	}
	maven { url "https://jitpack.io" }
}

configurations {
	enigmaRuntime
}

dependencies {
	implementation libs.bundles.asm
	implementation libs.enigma
	implementation libs.quilt.json5
	implementation libs.tinylog
	implementation libs.annotations
	implementation libs.mapping.io
	implementation libs.launchermeta.parser

	testImplementation libs.junit
	testImplementation libs.hamcrest
	testRuntimeOnly libs.junit.engine
	testImplementation libs.enigma.swing

	testInputsImplementation libs.dfu
	enigmaRuntime libs.dfu
}

var obfJar = file('build/obf/obf.jar')
var mappings = file('testMappings/')
var profile = file('build/resources/testInputs/profile.json')

task testEnigma(type: JavaExec, dependsOn: ["obfuscateTestInputs", "processTestInputsResources"]) {
	mainClass = "org.quiltmc.enigma.gui.Main"
	classpath = files(configurations.enigmaRuntime) + sourceSets.test.runtimeClasspath

	args('-jar', obfJar, '-mappings', mappings.getAbsolutePath(), '-profile', profile.getAbsolutePath(), '--development')
	doFirst {
		mappings.mkdirs()
	}
}

task testInputsJar(type: Jar) {
	from sourceSets.testInputs.output

	archiveFileName = "input.jar"
	destinationDirectory = file("build/obf")
}

task obfuscateTestInputs(type: proguard.gradle.ProGuardTask) {
	dependsOn testInputsJar

	verbose
	injars testInputsJar
	outjars obfJar

	libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
	libraryjars sourceSets.testInputs.compileClasspath

	dontshrink()
	dontoptimize()
	keepclasseswithmembers 'public class * {\
\t\tpublic static void main(java.lang.String[]);\
\t}'
	keepattributes 'SourceFile'
	keepattributes '*Annotation*'
	keepattributes 'InnerClasses'
	keepattributes 'NestMembers'
	keepattributes 'EnclosingMethod'
	keepattributes 'Deprecated'
	keepattributes 'Signature'
	keepattributes 'Record'
	printmapping 'build/obf/obf.txt'
}

tasks.test.dependsOn obfuscateTestInputs, processTestInputsResources

license {
	rule file('codeformat/FABRIC_MODIFIED_HEADER')
	rule file('codeformat/HEADER')

	include '**/*.java'
	exclude 'com/example/**/*.java'
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	withSourcesJar()
}

test {
	useJUnitPlatform()
}

publishing {
	def ENV = System.getenv()
	publications {
		maven(MavenPublication) {
			from components.java
		}
	}

	repositories {
		if (ENV.MAVEN_URL) {
			maven {
				url = ENV.MAVEN_URL

				credentials {
					username = ENV.MAVEN_USERNAME
					password = ENV.MAVEN_PASSWORD
				}
			}
		}
		mavenLocal()
	}
}
